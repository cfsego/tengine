global profile, phase, ups_profile, ups_phase, request, now = 0

function http_ups_profile_need_init(c) {
    return (ups_profile[pid(),c,0] == 0)
}

function http_ups_profile_init(c) {
    ups_profile[pid(),c,0] = 1
}

function http_ups_profile_set(c, stat) {
    index = ups_profile[pid(),c,0]
    ups_profile[pid(),c,index] = now
    ups_phase[pid(),c,index-1] = stat
    ups_profile[pid(),c,0]++
}

function http_ups_profile_display(c) {
    ups_total = ups_profile[pid(),c,0]

    remote = &@cast(c, "ngx_connection_t", NGX_SBIN_PATH)->addr_text
    remote_data = @cast(remote, "ngx_str_t", NGX_SBIN_PATH)->data
    remote_len = @cast(remote, "ngx_str_t", NGX_SBIN_PATH)->len

    printf("%s(%s).%p.ups: %s", user_string_n(remote_data, remote_len), request[pid(),c], c, ups_phase[pid(),c,0])

    for (i = 2; i < ups_total; i++) {
        period = ups_profile[pid(),c,i] - ups_profile[pid(),c,i-1]
        printf(",(%d),%s", period, ups_phase[pid(),c,i-1])
    }

    print("\n")
}

function http_ups_profile_destroy(c) {
    total = ups_profile[pid(),c,0]
    for (i = 1; i < total; i++) {
        delete ups_profile[pid(),c,i]
        delete ups_phase[pid(),c,i-1]
    }
    delete ups_profile[pid(),c,0]
}

function http_profile_need_init(c) {
    return (profile[pid(),c,0] == 0)
}

function http_profile_init(c) {
    profile[pid(),c,0] = 2
    profile[pid(),c,1] = 0
}

function http_profile_set(c, stat) {
    index = profile[pid(),c,0]
    profile[pid(),c,index] = now
    phase[pid(),c,index-2] = stat
    profile[pid(),c,0]++
}

function http_profile_display(c) {
    total = profile[pid(),c,0]

    remote = &@cast(c, "ngx_connection_t", NGX_SBIN_PATH)->addr_text
    remote_data = @cast(remote, "ngx_str_t", NGX_SBIN_PATH)->data
    remote_len = @cast(remote, "ngx_str_t", NGX_SBIN_PATH)->len

    printf("%s(%s).%p: %s", user_string_n(remote_data, remote_len), request[pid(),c], c, phase[pid(),c,0])

    for (i = 3; i < total; i++) {
        period = profile[pid(),c,i] - profile[pid(),c,i-1]
        printf(",(%d),%s", period, phase[pid(),c,i-2])
    }

    print("\n")
}

function http_profile_rewind(c) {
    total = profile[pid(),c,0]
    if (profile[pid(),c,1] < total) {
        profile[pid(),c,1] = total
    }
    profile[pid(),c,2] = profile[pid(),c,total-1]
    phase[pid(),c,0] = "ka"
    profile[pid(),c,0] = 3
    request[pid(),c] = ""
}

function http_profile_need_rewind(c) {
    if (phase[pid(),c,1] == "sh") {
        if (profile[pid(),c,0] > 4) {
            return 1
        } else {
            return 0
        }
    } else if (profile[pid(),c,0] > 3) {
        return 1
    } else if (phase[pid(),c,0] != "ac") {
        return 1
    } else {
        return 0
    }
}

function http_profile_destroy(c) {
    if (profile[pid(),c,1] > profile[pid(),c,0]) {
        total = profile[pid(),c,1]
    } else {
        total = profile[pid(),c,0]
    }
    for (i = 2; i < total; i++) {
        delete profile[pid(),c,i]
        delete phase[pid(),c,i-2]
    }
    delete profile[pid(),c,0]
    delete profile[pid(),c,1]
    delete request[pid(),c]
}

function http_profile_set_request(r, c) {
    uri = &@cast(r, "ngx_http_request_t", NGX_SBIN_PATH)->uri
    uri_data = @cast(uri, "ngx_str_t", NGX_SBIN_PATH)->data
    uri_len = @cast(uri, "ngx_str_t", NGX_SBIN_PATH)->len

    args = &@cast(r, "ngx_http_request_t", NGX_SBIN_PATH)->args
    args_data = @cast(args, "ngx_str_t", NGX_SBIN_PATH)->data
    args_len = @cast(args, "ngx_str_t", NGX_SBIN_PATH)->len

    if (args_len == 0) {
        request[pid(),c] = user_string_n(uri_data, uri_len)
    } else {
        request[pid(),c] = user_string_n(uri_data, uri_len) . "?" . user_string_n(args_data, args_len)
    }
}

/* preamble */
probe begin {
    printf("Tracing (/home/weiyue/tengine-os/tengine/objs/nginx)...\n\n")
}

probe timer.ms(10) {
    now += 10
}

probe process(NGX_SBIN_PATH).mark("http_probe_accept") {
    http_profile_init($arg1)
    http_profile_set($arg1,"ac")
}

probe process(NGX_SBIN_PATH).mark("http_probe_close") {
    if (http_profile_need_init($arg1)) {
        http_profile_init($arg1)
    }

    http_profile_set($arg1,"cc")
    http_profile_display($arg1)
    http_profile_destroy($arg1)
}

probe process(NGX_SBIN_PATH).mark("http_probe_ssl_handshaked") {
    if (http_profile_need_init($arg1)) {
        http_profile_init($arg1)
    }

    http_profile_set($arg1,"sh")
}

probe process(NGX_SBIN_PATH).mark("http_probe_head_read") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_profile_need_init(c)) {
        http_profile_init(c)
    }

    if (http_profile_need_rewind(c)) {
        http_profile_display(c)
        http_profile_rewind(c)
    }
    http_profile_set_request($arg1,c)
    http_profile_set(c,"hd")
}

probe process(NGX_SBIN_PATH).mark("http_probe_body_read") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_profile_need_init(c)) {
        http_profile_init(c)
    }

    http_profile_set(c,"bd")
}

probe process(NGX_SBIN_PATH).mark("http_probe_first_byte") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_profile_need_init(c)) {
        http_profile_init(c)
    }

    http_profile_set(c,"sd")
}

probe process(NGX_SBIN_PATH).mark("http_probe_request_fin") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_profile_need_init(c)) {
        http_profile_init(c)
    }

    http_profile_set(c,"fr")
}

probe process(NGX_SBIN_PATH).mark("http_probe_lingering_close") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_profile_need_init(c)) {
        http_profile_init(c)
    }

    http_profile_set(c,"lc")
}

probe process(NGX_SBIN_PATH).mark("http_probe_upstream_start") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    http_ups_profile_init(c)
    http_ups_profile_set(c,"sr")
}

probe process(NGX_SBIN_PATH).mark("http_probe_upstream_connected") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_ups_profile_need_init(c)) {
        http_ups_profile_init(c)
    }

    http_ups_profile_set(c,"cn")
}

probe process(NGX_SBIN_PATH).mark("http_probe_upstream_sent") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_ups_profile_need_init(c)) {
        http_ups_profile_init(c)
    }

    http_ups_profile_set(c,"st")
}

probe process(NGX_SBIN_PATH).mark("http_probe_upstream_first_byte") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_ups_profile_need_init(c)) {
        http_ups_profile_init(c)
    }

    http_ups_profile_set(c,"fb")
}

probe process(NGX_SBIN_PATH).mark("http_probe_upstream_fin") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_ups_profile_need_init(c)) {
        http_ups_profile_init(c)
    }

    http_ups_profile_set(c,"fi")
    http_ups_profile_display(c)
    http_ups_profile_destroy(c)
}

probe process(NGX_SBIN_PATH).mark("http_probe_upstream_restart") {
    c = @cast($arg1, "ngx_http_request_t", NGX_SBIN_PATH)->connection
    if (http_ups_profile_need_init(c)) {
        http_ups_profile_init(c)
    }

    http_ups_profile_set(c,"rs")
}
